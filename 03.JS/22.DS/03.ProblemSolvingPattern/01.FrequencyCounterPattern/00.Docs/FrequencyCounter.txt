So what is this frequency counter pattern ?

So the idea behind the frequency counter pattern is we use a object in JavaScript to basically collect a bunch of values and there frequencies 

And this becomes useful un algorithms and challenges when we have multiple pieces of data ,multiple inputs and you need to compare them to see if they consist if similar values ,if they are anagrams of one another 

or if a value is contained inside of another value ,any time we are comparing peices of data two input or more than two and frequencies if certain things occuring and i Know  that sounds really wishby washy and not that useful ,but i'll show you a couple of examples 

So it makes this a good approach in a nice pattern ,is that it is usually off O(n) time compared to the easier sol which comprises of nested loop which gives us the complexity of O(N*N) or O(N^2).Frequency Counter can often avoid the need for nested loop operation with arrays and strings


Lets take a example to understand more 


Q.Write a example function called same,Which accepts two arrays.The Function should return True if every value in the has its corresponding value squared in the second array ,the order does not matter but frequency of value must be same .

Sample input and output 

same([1,2,3],[4,1,9])//true

same([1,2,3],[1,9])//false

same([[1,2,1],[4,4,1]])//false

lets see a naive/easy approch

Solution
--------


function same(array1,array2)
{
	if(array1.length!=array2.length)
	{
		return false;
	}

	for(let i=0;i<array1.length;i++)
	{
		let correctIndex=array2.indexOf(array1[i]**2)
		if(correctIndex===-1)
		{
			return false;
		}
		console.log(array2);
		array2.splice(correctIndex,1);
		console.log(array2)
	}
	return true;
}

Now here we have used for loop to iterate over array which will have a time complexity of O(N) and .indexOf() function will also iterate over array n number of time where n is the length of array and hence time complexity of .indexOf() is also O(N) and since .indexOf() is nested in for loop overall complexity is O(N^2)



So lets refactor the code using object 


function same(ar1,ar2)
{
	if(ar1.length!==ar2.length)
	{
		return false;
	}
	let frequencyCounter1={};
	let frequencyCounter2={};
	for(let val of ar1)
	{
		frequencyCounter1[val]=(frequencyCounter1[val]||0)+1
	}
	for(let val ofn ar2)
	{
		frequencyCounter2[val]=(frequencyCounter2[val]||0)+1
	}
	for(let key inn frequencyCounter1)
	{
		if(!key**2 in frequencyCounter2)
		{
			return false;
		}
		if(frequencyCounter2[key**2]!==frequencyCounter1[key])
		{
			return false;
		}

	}
	return true;
}
